apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE',)
    }
}

sourceSets {
    functionaltest {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
        java {
            srcDir 'src/functionaltest'
        }
        resources.srcDir file('src/functionaltest/resources')
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-configuration-processor'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'ch.qos.logback:logback-core:1.1.7'
    compile 'org.mongodb:mongodb-driver:3.4.1'
    compile 'com.microsoft.azure:azure-storage:4.0.0'

    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.mashape.unirest:unirest-java:1.4.9'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = 'full'
    }
}

task functionaltest(type: Test) {
    testClassesDir = sourceSets.functionaltest.output.classesDir
    classpath = sourceSets.functionaltest.runtimeClasspath

    // This forces the functional tests to always run if the task is run
    outputs.upToDateWhen { false }

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = 'full'
    }
}
